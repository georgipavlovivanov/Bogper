/*
 * This file is generated by jOOQ.
 */
package com.example.msbogper.jooq.schemabooks.tables;


import com.example.msbogper.jooq.schemabooks.Keys;
import com.example.msbogper.jooq.schemabooks.Schemabooks;
import com.example.msbogper.jooq.schemabooks.tables.records.BookRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Book extends TableImpl<BookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>schemaBooks.BOOK</code>
     */
    public static final Book BOOK = new Book();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookRecord> getRecordType() {
        return BookRecord.class;
    }

    /**
     * The column <code>schemaBooks.BOOK.ISBN</code>.
     */
    public final TableField<BookRecord, Integer> ISBN = createField(DSL.name("ISBN"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>schemaBooks.BOOK.BOOK_NAME</code>.
     */
    public final TableField<BookRecord, String> BOOK_NAME = createField(DSL.name("BOOK_NAME"), SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>schemaBooks.BOOK.NUMBER_OF_PAGES</code>.
     */
    public final TableField<BookRecord, Integer> NUMBER_OF_PAGES = createField(DSL.name("NUMBER_OF_PAGES"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>schemaBooks.BOOK.CURRENT_PAGE</code>.
     */
    public final TableField<BookRecord, Integer> CURRENT_PAGE = createField(DSL.name("CURRENT_PAGE"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>schemaBooks.BOOK.AUTHOR</code>.
     */
    public final TableField<BookRecord, String> AUTHOR = createField(DSL.name("AUTHOR"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>schemaBooks.BOOK.BOOK_STATUS_DECSRIPTION</code>.
     */
    public final TableField<BookRecord, String> BOOK_STATUS_DECSRIPTION = createField(DSL.name("BOOK_STATUS_DECSRIPTION"), SQLDataType.VARCHAR(60), this, "");

    /**
     * The column <code>schemaBooks.BOOK.LAST_UPDATED</code>.
     */
    public final TableField<BookRecord, LocalDateTime> LAST_UPDATED = createField(DSL.name("LAST_UPDATED"), SQLDataType.LOCALDATETIME(10).nullable(false).defaultValue(DSL.field("NOW()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>schemaBooks.BOOK.YEAR</code>.
     */
    public final TableField<BookRecord, Integer> YEAR = createField(DSL.name("YEAR"), SQLDataType.INTEGER, this, "");

    private Book(Name alias, Table<BookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Book(Name alias, Table<BookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>schemaBooks.BOOK</code> table reference
     */
    public Book(String alias) {
        this(DSL.name(alias), BOOK);
    }

    /**
     * Create an aliased <code>schemaBooks.BOOK</code> table reference
     */
    public Book(Name alias) {
        this(alias, BOOK);
    }

    /**
     * Create a <code>schemaBooks.BOOK</code> table reference
     */
    public Book() {
        this(DSL.name("BOOK"), null);
    }

    public <O extends Record> Book(Table<O> child, ForeignKey<O, BookRecord> key) {
        super(child, key, BOOK);
    }

    @Override
    public Schema getSchema() {
        return Schemabooks.SCHEMABOOKS;
    }

    @Override
    public Identity<BookRecord, Integer> getIdentity() {
        return (Identity<BookRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<BookRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public List<UniqueKey<BookRecord>> getKeys() {
        return Arrays.<UniqueKey<BookRecord>>asList(Keys.CONSTRAINT_1);
    }

    @Override
    public List<Check<BookRecord>> getChecks() {
        return Arrays.<Check<BookRecord>>asList(
              Internal.createCheck(this, DSL.name("(YEAR > 1900)"), "(YEAR > 1900)", true)
        );
    }

    @Override
    public Book as(String alias) {
        return new Book(DSL.name(alias), this);
    }

    @Override
    public Book as(Name alias) {
        return new Book(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(String name) {
        return new Book(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Book rename(Name name) {
        return new Book(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Integer, Integer, String, String, LocalDateTime, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
