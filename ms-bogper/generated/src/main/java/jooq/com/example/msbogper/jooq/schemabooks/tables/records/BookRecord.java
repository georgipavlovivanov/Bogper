/*
 * This file is generated by jOOQ.
 */
package com.example.msbogper.jooq.schemabooks.tables.records;


import com.example.msbogper.jooq.schemabooks.tables.Book;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookRecord extends UpdatableRecordImpl<BookRecord> implements Record8<Integer, String, Integer, Integer, String, String, LocalDateTime, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>schemaBooks.BOOK.ISBN</code>.
     */
    public void setIsbn(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>schemaBooks.BOOK.ISBN</code>.
     */
    public Integer getIsbn() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>schemaBooks.BOOK.BOOK_NAME</code>.
     */
    public void setBookName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>schemaBooks.BOOK.BOOK_NAME</code>.
     */
    public String getBookName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>schemaBooks.BOOK.NUMBER_OF_PAGES</code>.
     */
    public void setNumberOfPages(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>schemaBooks.BOOK.NUMBER_OF_PAGES</code>.
     */
    public Integer getNumberOfPages() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>schemaBooks.BOOK.CURRENT_PAGE</code>.
     */
    public void setCurrentPage(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>schemaBooks.BOOK.CURRENT_PAGE</code>.
     */
    public Integer getCurrentPage() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>schemaBooks.BOOK.AUTHOR</code>.
     */
    public void setAuthor(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>schemaBooks.BOOK.AUTHOR</code>.
     */
    public String getAuthor() {
        return (String) get(4);
    }

    /**
     * Setter for <code>schemaBooks.BOOK.BOOK_STATUS_DECSRIPTION</code>.
     */
    public void setBookStatusDecsription(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>schemaBooks.BOOK.BOOK_STATUS_DECSRIPTION</code>.
     */
    public String getBookStatusDecsription() {
        return (String) get(5);
    }

    /**
     * Setter for <code>schemaBooks.BOOK.LAST_UPDATED</code>.
     */
    public void setLastUpdated(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>schemaBooks.BOOK.LAST_UPDATED</code>.
     */
    public LocalDateTime getLastUpdated() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>schemaBooks.BOOK.YEAR</code>.
     */
    public void setYear(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>schemaBooks.BOOK.YEAR</code>.
     */
    public Integer getYear() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, Integer, Integer, String, String, LocalDateTime, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, String, Integer, Integer, String, String, LocalDateTime, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Book.BOOK.ISBN;
    }

    @Override
    public Field<String> field2() {
        return Book.BOOK.BOOK_NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Book.BOOK.NUMBER_OF_PAGES;
    }

    @Override
    public Field<Integer> field4() {
        return Book.BOOK.CURRENT_PAGE;
    }

    @Override
    public Field<String> field5() {
        return Book.BOOK.AUTHOR;
    }

    @Override
    public Field<String> field6() {
        return Book.BOOK.BOOK_STATUS_DECSRIPTION;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Book.BOOK.LAST_UPDATED;
    }

    @Override
    public Field<Integer> field8() {
        return Book.BOOK.YEAR;
    }

    @Override
    public Integer component1() {
        return getIsbn();
    }

    @Override
    public String component2() {
        return getBookName();
    }

    @Override
    public Integer component3() {
        return getNumberOfPages();
    }

    @Override
    public Integer component4() {
        return getCurrentPage();
    }

    @Override
    public String component5() {
        return getAuthor();
    }

    @Override
    public String component6() {
        return getBookStatusDecsription();
    }

    @Override
    public LocalDateTime component7() {
        return getLastUpdated();
    }

    @Override
    public Integer component8() {
        return getYear();
    }

    @Override
    public Integer value1() {
        return getIsbn();
    }

    @Override
    public String value2() {
        return getBookName();
    }

    @Override
    public Integer value3() {
        return getNumberOfPages();
    }

    @Override
    public Integer value4() {
        return getCurrentPage();
    }

    @Override
    public String value5() {
        return getAuthor();
    }

    @Override
    public String value6() {
        return getBookStatusDecsription();
    }

    @Override
    public LocalDateTime value7() {
        return getLastUpdated();
    }

    @Override
    public Integer value8() {
        return getYear();
    }

    @Override
    public BookRecord value1(Integer value) {
        setIsbn(value);
        return this;
    }

    @Override
    public BookRecord value2(String value) {
        setBookName(value);
        return this;
    }

    @Override
    public BookRecord value3(Integer value) {
        setNumberOfPages(value);
        return this;
    }

    @Override
    public BookRecord value4(Integer value) {
        setCurrentPage(value);
        return this;
    }

    @Override
    public BookRecord value5(String value) {
        setAuthor(value);
        return this;
    }

    @Override
    public BookRecord value6(String value) {
        setBookStatusDecsription(value);
        return this;
    }

    @Override
    public BookRecord value7(LocalDateTime value) {
        setLastUpdated(value);
        return this;
    }

    @Override
    public BookRecord value8(Integer value) {
        setYear(value);
        return this;
    }

    @Override
    public BookRecord values(Integer value1, String value2, Integer value3, Integer value4, String value5, String value6, LocalDateTime value7, Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookRecord
     */
    public BookRecord() {
        super(Book.BOOK);
    }

    /**
     * Create a detached, initialised BookRecord
     */
    public BookRecord(Integer isbn, String bookName, Integer numberOfPages, Integer currentPage, String author, String bookStatusDecsription, LocalDateTime lastUpdated, Integer year) {
        super(Book.BOOK);

        setIsbn(isbn);
        setBookName(bookName);
        setNumberOfPages(numberOfPages);
        setCurrentPage(currentPage);
        setAuthor(author);
        setBookStatusDecsription(bookStatusDecsription);
        setLastUpdated(lastUpdated);
        setYear(year);
    }
}
